from collections import defaultdict
from datetime import datetime, timedelta

class Record:
    def __init__(self, name, phone=None, birthday=None):
        self.name = name
        self.phones = [phone] if phone else []
        self.birthday = birthday

    def add_phone(self, phone):
        if not phone.isdigit() or len(phone) != 10:
            raise ValueError("Invalid phone number. Must be 10 digits.")
        self.phones.append(phone)

    def add_birthday(self, birthday):
        try:
            datetime.strptime(birthday, "%d.%m.%Y")
            self.birthday = birthday
        except ValueError:
            raise ValueError("Invalid birthday format. Must be DD.MM.YYYY.")

class AddressBook:
    def __init__(self):
        self.data = {}

    def add_record(self, record):
        self.data[record.name] = record

    def find(self, name):
        return self.data.get(name)

    def get_birthdays_per_week(self):
        today = datetime.today().date()
        birthdays_per_week = defaultdict(list)

        for name, record in self.data.items():
            if record.birthday:
                birthday = datetime.strptime(record.birthday, "%d.%m.%Y").date()
                birthday_this_year = birthday.replace(year=today.year)

                if birthday_this_year < today:
                    birthday_this_year = birthday.replace(year=today.year + 1)

                delta_days = (birthday_this_year - today).days

                if delta_days < 7:
                    day_of_week = (today + timedelta(days=delta_days)).strftime('%A')
                    if day_of_week in ['Saturday', 'Sunday']:
                        day_of_week = 'Monday'
                    birthdays_per_week[day_of_week].append(name)

        return birthdays_per_week

def input_error(func):
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except ValueError as e:
            return str(e)
        except KeyError:
            return "Contact not found."
        except IndexError:
            return "Invalid command format."
    return inner

@input_error
def add_contact(args, book: AddressBook):
    name, phone, *_ = args
    record = book.find(name)
    message = "Contact updated."
    if record is None:
        record = Record(name)
        book.add_record(record)
        message = "Contact added."
    if phone:
        record.add_phone(phone)
    return message

@input_error
def change_contact(args, book: AddressBook):
    name, old_phone, new_phone, *_ = args
    record = book.find(name)
    if record:
        if old_phone in record.phones:
            record.phones.remove(old_phone)
            record.add_phone(new_phone)
            return "Contact updated."
        else:
            return "Old phone number not found."
    else:
        return "Contact not found."

@input_error
def show_phone(args, book: AddressBook):
    name, *_ = args
    record = book.find(name)
    if record:
        return ", ".join(record.phones)
    else:
        return "Contact not found."

def show_all(book: AddressBook):
    if not book.data:
        return "No contacts found."
    else:
        result = ""
        for name, record in book.data.items():
            phones = ", ".join(record.phones)
            birthday = f", Birthday: {record.birthday}" if record.birthday else ""
            result += f"{name}: {phones}{birthday}\n"
        return result.strip()

@input_error
def add_birthday(args, book: AddressBook):
    name, birthday, *_ = args
    record = book.find(name)
    if record:
        record.add_birthday(birthday)
        return "Birthday added."
    else:
        return "Contact not found."

@input_error
def show_birthday(args, book: AddressBook):
    name, *_ = args
    record = book.find(name)
    if record and record.birthday:
        return record.birthday
    else:
        return "Contact not found or birthday not set."

def birthdays(book: AddressBook):
    birthdays_per_week = book.get_birthdays_per_week()
    if not birthdays_per_week:
        return "No birthdays next week."
    else:
        result = ""
        for day, names in birthdays_per_week.items():
            result += f"{day}: {', '.join(names)}\n"
        return result.strip()

def parse_input(user_input):
    cmd, *args = user_input.split()
    cmd = cmd.strip().lower()
    return cmd, *args

def main():
    book = AddressBook()
    print("Welcome to the assistant bot!")
    while True:
        user_input = input("Enter a command: ")
        command, *args = parse_input(user_input)

        if command in ["close", "exit"]:
            print("Good bye!")
            break

        elif command == "hello":
            print("How can I help you?")

        elif command == "add":
            print(add_contact(args, book))

        elif command == "change":
            print(change_contact(args, book))

        elif command == "phone":
            print(show_phone(args, book))

        elif command == "all":
            print(show_all(book))

        elif command == "add-birthday":
            print(add_birthday(args, book))

        elif command == "show-birthday":
            print(show_birthday(args, book))

        elif command == "birthdays":
            print(birthdays(book))

        else:
            print("Invalid command.")

if __name__ == "__main__":
    main()
